# -*- mode: tcl; -*-

##################################
## Handles the construction of text nodes from aset of text segments
## two processes -- depending on whether we are re-installing or not
##


proc show-text-nodes {segs} {
    global text_nodes

    if [info exists text_nodes] {
	reinstall-text-nodes $segs
    } else {
	install-text-nodes $segs
    }

    # 4. Redisplay the graph
    redisplay-net
    set-mode link
}

proc install-text-nodes {segs} {

    #1. Clear the network
    reset-rst

    #2.  Build the new text nodes
    foreach seg $segs { make-node [lindex $seg 0] "text"}
}


proc reinstall-text-nodes {segs} {
    global node text_nodes group_nodes old_node old_text_nodes old_group_nodes

    # 1. Move the old array (if any) to backup
    array set old_node [array get node]
    set old_text_nodes $text_nodes
    set old_group_nodes $group_nodes
    reset-rst

    # 2. Build the new text nodes
    foreach seg $segs {
	reinstall-node [delete-newlines [lindex $seg 0]] "text" [lindex $seg 1]
    }

    # 3. Link text nodes to their parents
    foreach nid $text_nodes {
	reinstall-parent $nid
    }
}

proc reinstall-node  {text type old_node_id} {
    global node  old_node

    if { $type == "text" && $text == {} } {return 0 }

    # make the node
    set node_id [make-node $text $type]

    if { $old_node_id != {} } {
	set node($node_id,oldindex) $old_node_id
	set old_node($old_node_id,newindex) $node_id
    }
    return $node_id
}

proc reinstall-parent {nid} {
    global node  old_node

    set old_nid $node($nid,oldindex)
    if { $old_nid == {} } { return 0 }
    set old_pid $old_node($old_nid,parent)
    if {  $old_pid != {} } {

	set new_pid $old_node($old_pid,newindex)

	# we have a parent to reinstall

	if { $old_node($old_pid,type) == "text" } {

	    #  the parent is text
	    if { $old_node($old_pid,newindex) == {} } {
		# text parent dropped - no link to be made
		return {}
	    } else {
		link-nodes $new_pid $nid $old_node($old_nid,relname) 0
	    }
	} else {

	    # the parent is a group node
	    set parent_link_needed 0
	    if { $new_pid == {} } {
		set new_pid [reinstall-node "" $old_node($old_pid,type) $old_pid]
		# link the parent node if needed
		set parent_link_needed 1
	    }

	    # link to the parent
	    link-nodes $new_pid $nid $old_node($old_nid,relname) 0

	    # relink the parent if needed
	    if $parent_link_needed {reinstall-parent $new_pid}
	}
    }
}


proc reset-rst {} {
    global rstw node text_nodes group_nodes \
	last_text_node_id last_group_node_id wtn
    if [info exists node] {unset node}
    if [info exists wtn] {unset wtn}
    set text_nodes {}
    set group_nodes {}
    set last_text_node_id 0
    set last_group_node_id 5000
}



proc unique-group-node-id {} {
    global last_group_node_id
    return [incr last_group_node_id]
}

proc delete-newlines {text} {
    eval concat [split $text \n]
}
